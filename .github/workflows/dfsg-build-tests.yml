name: Build tests

on:
  push:

  pull_request:

permissions: {}

jobs:
  build:
    strategy:
      matrix:
        version: [ipu6epmtl, ipu6ep, ipu6, hal]
        os: ["ubuntu:24.04", "ubuntu:22.04", "ubuntu:20.04"]
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: intel/ipu6-camera-bins
          ref: dfsg
          path: bins

      - name: Install from intel/ipu6-camera-bins
        run: |
          cd "${GITHUB_WORKSPACE}/bins"

          cat README.md | \
            awk 'BEGIN { \
                FS="/"; \
              } \
              /^```/ { \
                getline; \
                if ($1 == "# Runtime files") { \
                  while ($1 != "```") { \
                    print $0; \
                    getline; \
                  } \
                } \
              }' | \
            sed 's,ipu6-camera-bins/,./,' | \
            sh -x

      - uses: actions/checkout@v4
        with:
          path: hal

      - name: Install prerequisite packages
        run: |
          echo 'APT::Get::Always-Include-Phased-Updates True;' | tee -a /etc/apt/apt.conf
          echo 'Acquire::http::User-Agent-Non-Interactive "true";' | tee -a /etc/apt/apt.conf
          apt-get update -q
          export TZ=Asia/Shanghai
          echo "" | apt-get install -qy tzdata
          echo "" | apt-get install git build-essential cmake libexpat-dev automake libtool libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libunwind-dev --yes
      - name: Build test for ${{ matrix.version }} on ${{ matrix.os }}
        timeout-minutes: 10
        run: |
          case "${{ matrix.os }}" in
            ("ubuntu:24.04")
              fortify_level=3
              ;;
            ("ubuntu:22.04"|"ubuntu:20.04")
              fortify_level=2
              ;;
            (*)
              echo "${{ matrix.os }} is unsupported yet. Please find the default fortify_level in /usr/share/perl5/Dpkg/Vendor/Ubuntu.pm or /usr/share/perl5/Dpkg/Vendor/Debian.pm."
              exit 1
              ;;
          esac
          cd "${GITHUB_WORKSPACE}/hal"

          mkdir build && cd build
          if [ "${{ matrix.version }}" = "hal" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release \
              "-DCMAKE_CXX_FLAGS=-D_FORTIFY_SOURCE=$fortify_level" \
              ../src/hal/hal_adaptor;
          else
            cmake -DCMAKE_BUILD_TYPE=Release \
              "-DCMAKE_CXX_FLAGS=-D_FORTIFY_SOURCE=$fortify_level" \
              -DIPU_VER="${{ matrix.version }}" \
              -DUSE_PG_LITE_PIPE=ON \
              -DUSE_HAL_ADAPTOR=ON \
              ..
          fi
          VERBOSE=1 make
          make install
